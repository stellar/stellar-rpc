name: Soroban Tools e2e

on:
  push:
    branches: [ main, release/** ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_protected == 'true' && github.sha || github.ref }}
  cancel-in-progress: true

env: 
  # the gh tag of system-test repo version to run
  SYSTEM_TEST_GIT_REF: refs/pull/146/head

  # the soroban CLI source code to compile and run from system test
  SYSTEM_TEST_STELLAR_CLI_REF: v23.1.4

  # sets the version of rust toolchain that will be pre-installed in the
  # test runtime environment, tests invoke rustc/cargo
  SYSTEM_TEST_RUST_TOOLCHAIN_VERSION: stable

  # set the version of js-stellar-sdk to use, need to choose one of either
  # resolution options, using npm release or a gh ref:
  #
  # option #1, set the version of stellar-sdk based on a npm release version
  SYSTEM_TEST_JS_STELLAR_SDK_NPM_VERSION: 14.0.0
  # option #2, set the version of stellar-sdk used as a ref to a gh repo if
  # a value is set on SYSTEM_TEST_JS_STELLAR_SDK_GH_REPO, it takes
  # precedence over any SYSTEM_TEST_JS_STELLAR_SDK_NPM_VERSION
  SYSTEM_TEST_JS_STELLAR_SDK_GH_REPO:
  SYSTEM_TEST_JS_STELLAR_SDK_GH_REF:

  # define the versions of components within quickstart that comprise the rest of target stack to test upon   
  SYSTEM_TEST_STELLAR_XDR_VERSION: v23.0.0
  SYSTEM_TEST_STELLAR_CORE_VERSION: v23.0.1
  SYSTEM_TEST_HORIZON_VERSION: horizon-v23.0.0
  SYSTEM_TEST_LAB_VERSION: main
  SYSTEM_TEST_PROTOCOL_VERSION: 23

  SYSTEM_TEST_IMAGE: ghcr.io/${{ github.repository_owner }}/${{ github.repository_id }}/system-test"

jobs:
  prepare-config:
    runs-on: ubuntu-latest
    outputs:
      images-config: ${{ steps.set-config.outputs.images }}
      system-test-image-cached: "${{env.SYSTEM_TEST_IMAGE}}:${{ steps.set-cache-key.outputs.cache-key }}"
    steps:
      - id: set-cache-key
        run: |
          # Fetch commit SHAs for each dependency repo
          SYSTEM_TEST_SHA=$(git ls-remote https://github.com/stellar/system-test.git ${{ env.SYSTEM_TEST_GIT_REF }} | awk '{print $1}')
          if [ -z "$SYSTEM_TEST_SHA" ]; then
            echo "Error: Could not find ref ${{ env.SYSTEM_TEST_GIT_REF }} in stellar/system-test"
            exit 1
          fi
          
          STELLAR_CLI_SHA=$(git ls-remote https://github.com/stellar/stellar-cli.git ${{ env.SYSTEM_TEST_STELLAR_CLI_REF }} | awk '{print $1}')
          if [ -z "$STELLAR_CLI_SHA" ]; then
            echo "Error: Could not find ref ${{ env.SYSTEM_TEST_STELLAR_CLI_REF }} in stellar/stellar-cli"
            exit 1
          fi
          
          # Handle JS Stellar SDK
          if [ -n "${{ env.SYSTEM_TEST_JS_STELLAR_SDK_GH_REPO }}" ]; then
            JS_SDK_PART=$(git ls-remote https://github.com/${{ env.SYSTEM_TEST_JS_STELLAR_SDK_GH_REPO }}.git ${{ env.SYSTEM_TEST_JS_STELLAR_SDK_GH_REF }} | awk '{print $1}')
            if [ -z "$JS_SDK_PART" ]; then
              echo "Error: Could not find ref ${{ env.SYSTEM_TEST_JS_STELLAR_SDK_GH_REF }} in ${{ env.SYSTEM_TEST_JS_STELLAR_SDK_GH_REPO }}"
              exit 1
            fi
          else
            JS_SDK_PART="${{ env.SYSTEM_TEST_JS_STELLAR_SDK_NPM_VERSION }}"
          fi
          
          # Create cache key by hashing all components
          CACHE_INPUT="${SYSTEM_TEST_SHA}${STELLAR_CLI_SHA}${JS_SDK_PART}"
          CACHE_KEY=$(echo -n "$CACHE_INPUT" | sha256sum | cut -c1-16)
          echo "cache-key=${CACHE_KEY}" >> $GITHUB_OUTPUT
          echo "Generated cache key: ${CACHE_KEY}"
      
      - id: set-config
        run: |
          cat <<EOF >> $GITHUB_OUTPUT
          images<<DELIMITER
          [
            {
              "tag": "rpc-custom",
              "config": {
                "protocol_version_default": ${{ env.SYSTEM_TEST_PROTOCOL_VERSION }}
              },
              "deps": [
                { "name": "xdr", "repo": "stellar/rs-stellar-xdr", "ref": "${{ env.SYSTEM_TEST_STELLAR_XDR_VERSION }}" },
                { "name": "core", "repo": "stellar/stellar-core", "ref": "${{ env.SYSTEM_TEST_STELLAR_CORE_VERSION }}", "options": { "configure_flags": "--disable-tests" } },
                { "name": "rpc", "repo": ${{ github.repository }}, "ref": "${{ github.ref }}" },
                { "name": "horizon", "repo": "stellar/go", "ref": "${{ env.SYSTEM_TEST_HORIZON_VERSION }}" },
                { "name": "friendbot", "repo": "stellar/go", "ref": "${{ env.SYSTEM_TEST_HORIZON_VERSION }}" },
                { "name": "lab", "repo": "stellar/laboratory", "ref": "${{ env.SYSTEM_TEST_LAB_VERSION }}" }
              ],
              "additional-tests": []
            }
          ]
          DELIMITER
          EOF

  build-quickstart:
    needs: prepare-config
    uses: stellar/quickstart/.github/workflows/build.yml@main
    with:
      images: ${{ needs.prepare-config.outputs.images-config }}
      archs: '["amd64"]'

  check-system-test-cache:
    runs-on: ubuntu-latest
    needs: prepare-config
    outputs:
      cache-hit: ${{ steps.check.outputs.exists }}
    steps:
      - id: check
        name: Check if cached system-test image exists
        run: |
          if docker manifest inspect ${{ needs.prepare-config.outputs.system-test-image-cached }} > /dev/null 2>&1; then
            echo "Image exists in registry"
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Image not found in registry"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  build-system-test:
    runs-on: ubuntu-latest-4-cores
    needs: [prepare-config, check-system-test-cache]
    if: needs.check-system-test-cache.outputs.cache-hit != 'true'
    env:
      SYSTEM_TEST_IMAGE: ${{ needs.prepare-config.outputs.system-test-image-cached }}
    steps:
    - uses: actions/checkout@v4
      name: checkout system-test
      with:
        repository: stellar/system-test
        ref: ${{ env.SYSTEM_TEST_GIT_REF }}
        path: system-test
    
    - if: env.SYSTEM_TEST_JS_STELLAR_SDK_GH_REPO != ''
      name: prepare local js-stellar-sdk
      run: |
        rm -rf $GITHUB_WORKSPACE/system-test/js-stellar-sdk;
    
    - if: env.SYSTEM_TEST_JS_STELLAR_SDK_GH_REPO != ''
      uses: actions/checkout@v4
      with:
        repository: ${{ env.SYSTEM_TEST_JS_STELLAR_SDK_GH_REPO }}
        ref: ${{ env.SYSTEM_TEST_JS_STELLAR_SDK_GH_REF }}
        path: system-test/js-stellar-sdk
    
    - uses: stellar/actions/rust-cache@main
    
    - name: Build system test with component versions
      run: |
        cd $GITHUB_WORKSPACE/system-test
        if [ -z "$SYSTEM_TEST_JS_STELLAR_SDK_GH_REPO" ]; then \
          JS_STELLAR_SDK_REF="$SYSTEM_TEST_JS_STELLAR_SDK_NPM_VERSION"; \
        else \
          JS_STELLAR_SDK_REF="file:/home/tester/js-stellar-sdk"; \
        fi
        make \
          STELLAR_CLI_GIT_REF=$SYSTEM_TEST_STELLAR_CLI_REF \
          RUST_TOOLCHAIN_VERSION=$SYSTEM_TEST_RUST_TOOLCHAIN_VERSION \
          JS_STELLAR_SDK_NPM_VERSION=$JS_STELLAR_SDK_REF \
          SYSTEM_TEST_IMAGE=$SYSTEM_TEST_IMAGE \
          build 
    
    - name: Publish system-test image
      run: |
        docker push $SYSTEM_TEST_IMAGE
        
  integration:
    name: System tests
    needs: [build-system-test, build-quickstart, prepare-config]
    # Run if build-system-test succeeded OR was skipped because image is already in built(cache hit) 
    if: needs.build-system-test.result == 'success' || needs.build-system-test.result == 'skipped'
      
    strategy:
      matrix:
        scenario-filter: [ "^TestDappDevelop$/^.*$" ]
    runs-on: ubuntu-latest
    env:
      SYSTEM_TEST_VERBOSE_OUTPUT: "true"

      # the soroban test cases will compile various contracts from the examples repo
      SYSTEM_TEST_SOROBAN_EXAMPLES_GIT_HASH: "v22.0.1"
      SYSTEM_TEST_SOROBAN_EXAMPLES_GIT_REPO: "https://github.com/stellar/soroban-examples.git"

      SYSTEM_TEST_IMAGE: ${{ needs.prepare-config.outputs.system-test-image-cached }}
    steps:
      - name: download system-test image
        run: |
          docker pull $SYSTEM_TEST_IMAGE
      - name: Start quickstart with rpc
        uses: stellar/quickstart@main
        with:
          artifact: image-quickstart-rpc-custom-amd64.tar
          tag: rpc-custom-amd64
          enable: core,rpc

      - name: Run system test scenarios
        run: |
          docker run \
          --rm -t --name e2e_test $SYSTEM_TEST_IMAGE \
          --VerboseOutput $SYSTEM_TEST_VERBOSE_OUTPUT  \
          --TargetNetworkRPCURL http://host.docker.internal:8000/rpc \
          --TestFilter "${{ matrix.scenario-filter }}" \
          --SorobanExamplesGitHash $SYSTEM_TEST_SOROBAN_EXAMPLES_GIT_HASH \
          --SorobanExamplesRepoURL $SYSTEM_TEST_SOROBAN_EXAMPLES_GIT_REPO
