name: Stellar RPC

defaults:
  run:
    shell: bash

on:
  push:
    branches: [ main, release/** ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_protected == 'true' && github.sha || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    strategy:
      matrix:
        include:
          - os: windows-latest
            rust_target: x86_64-pc-windows-gnu
            go_arch: amd64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-go
      # On windows, make sure we have the same compiler (linker) used by rust.
      # This is important since the symbols names won't match otherwise.
      - if: matrix.os == 'windows-latest'
        name: Install the same mingw gcc compiler used by rust
        run: |
          C:/msys64/usr/bin/pacman.exe -S mingw-w64-x86_64-gcc --noconfirm
          echo "CC=C:/msys64/mingw64/bin/gcc.exe" >> $GITHUB_ENV
          echo "C:/msys64/mingw64/bin" >> $GITHUB_PATH

      # Use cross-compiler for linux aarch64
      - if: matrix.rust_target == 'aarch64-unknown-linux-gnu'
        name: Install aarch64 cross-compilation toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-10-aarch64-linux-gnu
          echo 'CC=aarch64-linux-gnu-gcc-10' >> $GITHUB_ENV

      - run: |
          rustup target add ${{ matrix.rust_target }}
          rustup update
      - uses: stellar/actions/rust-cache@main
      - run: make build-libs
        env:
          CARGO_BUILD_TARGET: ${{ matrix.rust_target }}

      - name: Build Stellar RPC reproducible build
        run: |
          GODEBUG=cgo=1 go build -x -trimpath -buildvcs=false ./cmd/stellar-rpc
          ls -lh stellar-rpc
          file stellar-rpc
        env:
          CGO_ENABLED: 1
          GOARCH: ${{ matrix.go_arch }}
